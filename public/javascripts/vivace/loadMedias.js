// Generated by CoffeeScript 1.4.0
(function() {
  var _options;

  Vivace.loadMedias = function(callback) {
    return $.each(Vivace.voices, function(name, voice) {
      if (voice.sigType === 'audio') {
        callback(name, voice, Vivace.loadAudioFile);
      }
      if (voice.sigType === 'video') {
        return callback(name, voice, Vivace.loadVideoFile);
      }
    });
  };

  _options = function(voicename, buffer) {
    var opt, sr;
    sr = Vivace.audiocontext.sampleRate / 2;
    return opt = {
      'buffer': buffer,
      'pan': {
        min: -1,
        max: 1,
        onChange: function(value) {
          var v;
          v = value * 10;
          Vivace.audionodes[voicename].setPosition(0, v, 0);
          return console.log(voicename + '(pan):' + value);
        }
      },
      'gain': {
        min: 0,
        max: 1,
        onChange: function(value) {
          Vivace.audionodes[voicename].gain.value = value;
          return console.log(voicename + '(gain):' + value);
        }
      }
    };
  };

  Vivace.loadAudioFile = function(voicename, filename, callback, audioFilesDir) {
    var request, url;
    if (audioFilesDir == null) {
      audioFilesDir = '../../audios/';
    }
    request = new XMLHttpRequest();
    url = audioFilesDir + filename;
    request.open('GET', url, true);
    request.responseType = 'arraybuffer';
    request.onload = function() {
      return Vivace.audiocontext.decodeAudioData(request.response, function(buffer) {
        return callback(voicename, _options(voicename, buffer));
      });
    };
    request.onerror = function() {
      return console.log('error while loading audio file from ' + url);
    };
    return request.send();
  };

  Vivace.loadVideoFile = function(voicename, filename, audioFilesDir) {
    var popcorn, vid;
    if (audioFilesDir == null) {
      audioFilesDir = '../../videos/';
    }
    vid = document.getElementsByTagName('video')[0];
    vid.src = audioFilesDir + filename;
    vid.id = 'voice_' + voicename;
    Vivace.voices[voicename].popcorn = popcorn = Popcorn('#' + vid.id);
    return popcorn.preload('auto');
  };

}).call(this);
