// Generated by CoffeeScript 1.4.0
(function() {
  var dict, tick, update, updateEvent, updateMethodId;

  updateEvent = function(eventName, value) {
    return Vivace.events[eventName] = value;
  };

  updateMethodId = function(voice, methodname) {
    voice[methodname + 'Id'] += 1;
    voice[methodname + 'Id'] += 1;
    return voice[methodname + 'Id'] += 1;
  };

  dict = function(voice, method) {
    var _dict;
    _dict = {};
    _dict['value'] = voice[method];
    _dict['id'] = voice[method + 'Id'];
    return _dict;
  };

  tick = function(voicename, callback) {
    var allvoices, events, lastVoices, semiBreve;
    Vivace.beats += 1;
    allvoices = Vivace.voices;
    lastVoices = Vivace.lastVoices;
    events = Vivace.events;
    semiBreve = Vivace.semiBreve;
    return $.each(events, function(eventname, event) {
      var lastVoice, voice, _durDict, _durId, _gdurDict, _gdurId, _graintime, _offset, _pos, _posDict, _posId, _time;
      if (eventname === 'id') {
        if (event === voice._name) {
          voice = allvoices[event];
          lastVoice = lastVoices[event];
          _durDict = dict(lastVoice, 'dur');
          _posDict = dict(lastVoice, 'pos');
          _gdurDict = dict(lastVoice, 'gdur');
          _durId = _durDict.id % _durDict.value.length | 0;
          Vivace.events.nextbeat = (_durDict.value[_durId].val * semiBreve) + Vivace.beats;
          if (voice.sigType === 'audio') {
            _posId = _posDict.id % _posDict.value.length | 0;
            _gdurId = _gdurDict.id % _gdurDict.value.length | 0;
            _time = window.Vivace.audiocontext.currentTime;
            _offset = _posDict.value[_posId].val;
            _graintime = _gdurDict.value[_gdurId].val;
            callback({
              type: 'audio',
              time: _time,
              offset: _offset,
              graintime: _graintime
            }, Vivace.events.nextbeat);
          } else if (lastVoices[i].sigType === 'video') {
            _posId = _posDict.id % _posDict.value.length | 0;
            _pos = _posDict.value[_posId];
            callback({
              type: 'video',
              pos: _pos
            }, Vivace.events.nextbeat);
          }
          updateMethodId(voice, 'dur');
          updateMethodId(voice, 'pos');
          updateMethodId(voice, 'gdur');
          return updateEvent('nextbeat', Vivace.events.nextbeat);
        }
      }
    });
  };

  update = function(voicename, callback) {
    return $('div.dg.main').ready(function() {
      return tick(voicename, function(options, nextbeat) {
        if (options.type === 'audio') {
          Vivace.playVoice(voicename, options.time, options.offset, options.graintime);
        }
        if (options.type === 'video') {
          $('#voice_' + voice._name).css('z-index', '900');
          Vivace.playVideo(voicename, options.pos);
        }
        return callback(voicename, nextbeat);
      });
    });
  };

  window.Vivace.update = update;

  window.Vivace.masterClock = setInterval(Vivace.tick, Vivace.timeInterval);

}).call(this);
